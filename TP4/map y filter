void emp_printAemployeeIdMap(void* employee)
{
	int bEmployee_id = ((Employee*)employee)->id;

	if(employee!=NULL)
	{
		printf("\nID: %d\n",
				bEmployee_id);
	}
}




int ll_map(LinkedList* this, void (*pFunc)(void*))
{
    int returnAux =-1;
    Node* pNode1;
    int i;
    int llLen = ll_len(this);

    if(this!=NULL && pFunc!=NULL)
    {
    	for(i=0;i<llLen;i++)
    	{
    		pNode1 = ll_get(this,i);
    		pFunc(pNode1);//imprimir un elemento
    		ll_set(this,i,pNode1);
    	}
    	returnAux = 0;
    }
    return returnAux;
}



int controller_pruebaMap(LinkedList* pArrayListEmployee)
{
	int retorno=-1;
	int lenLL;

	lenLL = ll_len(pArrayListEmployee);
	if(pArrayListEmployee!=NULL && lenLL>0)
	{
		ll_map(pArrayListEmployee,emp_printAemployeeIdMap);//1asc y 0 desc
		retorno = 0;
	}
	else
	{
		printf("No existen datos cargados a mapear!\n");
	}
	return retorno;
}




int emp_filterEmployeeById(void* employee)
{
	int bEmployee_id = ((Employee*)employee)->id;

	if(bEmployee_id>=20 && bEmployee_id<=50)
	{
		return 1;
	}
	else
		return 0;

	return -1;
}





LinkedList* ll_filter(LinkedList* this, int (*pFunc)(void*))//1 cumple criterio -1 no
{
	int criterio;
	LinkedList* cloneArray=NULL;
    Node* pNode;
    int i;
    int llLen = ll_len(this);

    if(this!=NULL && pFunc!=NULL)
    {
		cloneArray = ll_newLinkedList();
    	for(i=0;i<llLen;i++)
    	{
    		pNode = ll_get(this,i);
    		criterio = pFunc(pNode);//imprimir un elemento
    		if(criterio ==1)
    		{
    			ll_add(cloneArray,pNode);
    		}
    	}
    }
    return cloneArray;
}




int controller_pruebaFilter(LinkedList* pArrayListEmployee)
{
	LinkedList* lista_Filtrada = NULL;
	int retorno=-1;
	int lenLL;

	lenLL = ll_len(pArrayListEmployee);
	if(pArrayListEmployee!=NULL && lenLL>0)
	{
		lista_Filtrada = ll_filter(pArrayListEmployee,emp_filterEmployeeById);//1 y 0 desc
		if(lista_Filtrada!=NULL)
		{
			controller_ListEmployee(lista_Filtrada);
			retorno = 0;
		}
	}
	else
	{
		printf("No existen datos cargados a filtrar!\n");
	}
	return retorno;
}



LinkedList* ll_reduce(LinkedList* this, int (*pFunc)(void*))//1 cumple criterio -1 no
{
	int bindex;
	int criterio;
    Node* pNode;
    int i;
    int llLen;

    if(this!=NULL && pFunc!=NULL)
    {
    	for(i=0;i<llLen;i++)
    	{

    		llLen = ll_len(this);
    		pNode = ll_get(this,i);
    		criterio = pFunc(pNode);//imprimir un elemento

    		if(criterio ==1)
    		{

    		}
    	}
    }

    return this;
}


int controller_pruebaReduce(LinkedList* pArrayListEmployee)
{
	LinkedList* pfilteredArrayListEmployee;
	int retorno=-1;
	int lenLL;

	lenLL = ll_len(pArrayListEmployee);
	if(pArrayListEmployee!=NULL && lenLL>0)
	{
		pfilteredArrayListEmployee = ll_newLinkedList();
		pfilteredArrayListEmployee = ll_reduce(pArrayListEmployee,emp_filterEmployeeById);//1 y 0 desc
		if(pArrayListEmployee!=NULL)
		{
			controller_ListEmployee(pfilteredArrayListEmployee);
			retorno = 0;
		}
	}
	else
	{
		printf("No existen datos cargados a filtrar!\n");
	}
	return retorno;
}




int ll_map(LinkedList* this, void (*pFunc)(void*));
int controller_pruebaMap(LinkedList* pArrayListEmployee);

int emp_filterEmployeeById(void* employee);
LinkedList* ll_filter(LinkedList* this, int (*pFunc)(void*));
int controller_pruebaFilter(LinkedList* pArrayListEmployee);

LinkedList* ll_reduce(LinkedList* this, int (*pFunc)(void*));
int controller_pruebaReduce(LinkedList* pArrayListEmployee);
